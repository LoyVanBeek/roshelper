{
  "name": "Roshelper",
  "tagline": "Helper library for ROS",
  "body": "# roshelper\r\n\r\nA helper library for rospy. `roshelper` provides a variety of helper function\r\nand decorators to make developing ROS nodes in Python much easier.\r\n\r\n# Examples\r\n`roshelper` can reduce the amount of code you write and make it look less shit.\r\nBelow is an example of how shit your code will look if you just use rospy. This\r\nROS node has three publishers and three subscribers. Two pub / sub pairs are\r\nsending and receiving Int64s and one pub / sub pair is sending and receiving a\r\nstring.\r\n\r\n```python\r\nimport rospy\r\nfrom std_msgs.msg import String\r\nfrom std_msgs.msg import Int64\r\n\r\n\r\nstr_pub = rospy.Publisher(\"/test_node_string\", String, queue_size=1)\r\nint_pub_1 = rospy.Publisher(\"/test_node_int\", Int64, queue_size=1)\r\nint_pub_2 = rospy.Publisher(\"/another_test_node_int\", Int64, queue_size=1)\r\n\r\n\r\ndef get_int_sub(topic_name):\r\n    def int_sub(num):\r\n        rospy.loginfo(\"Int Sub ({}) --> {}\".format(topic_name, num))\r\n\r\n\r\ndef str_sub_callback(word):\r\n    rospy.loginfo(\"Sub --> {}\".format(word))\r\n\r\n\r\nstr_sub = rospy.Subscriber(\"/test_node_string\", String, str_sub_callback,\r\n                           queue_size=1)\r\n\r\nint_sub_1 = rospy.Subscriber(\r\n    \"/test_node_int\", Int64,\r\n    get_int_sub(\"/test_node_int\"), queue_size=1)\r\n\r\n\r\nint_sub_2 = rospy.Subscriber(\r\n    \"/another_test_node_int\", Int64,\r\n    get_int_sub(\"/another_test_node_int\"), queue_size=1)\r\n\r\n\r\ndef publish_int(num, pub):\r\n    rospy.loginfo(\"Int Pub --> {}\".format(num))\r\n    msg = Int64()\r\n    msg.data = num\r\n    pub.publish(msg)\r\n\r\n\r\ndef publish_str(word):\r\n    rospy.loginfo(\"Pub --> {}\".format(word))\r\n    st = String()\r\n    st.data = word[::-1]\r\n    str_pub.publish(st)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    rospy.init_node(\"test_node\", anonymous=False)\r\n    freq = rospy.get_param(\"frequency\", 30)\r\n    rate = rospy.Rate(freq)\r\n    while not rospy.is_shutdown():\r\n        publish_str(\"balls\")\r\n        publish_int(3, int_pub_1)\r\n        publish_int(3, int_pub_2)\r\n        rate.sleep()\r\n```\r\n\r\nYup, that was ugly. However, with Pythonic power coursing through my veins, I\r\nhave provided some sugar that makes your code look beautiful. Using decorators\r\nand reflection, I am able to turn that ugly mess of text above into a\r\nstructured and readable piece of code.\r\n\r\n```python\r\nimport roshelper\r\nimport rospy\r\nfrom std_msgs.msg import String\r\nfrom std_msgs.msg import Int64\r\n\r\n\r\nn = roshelper.Node(\"test_node\", __name__, anonymous=False)\r\n\r\n\r\n@n.publisher(\"/test_node_string\", String)\r\ndef str_pub(word):\r\n    rospy.loginfo(\"Pub --> {}\".format(word))\r\n    st = String()\r\n    st.data = word[::-1]\r\n    return st\r\n\r\n\r\n@n.publisher(Int64)\r\ndef int_pub(num):\r\n    rospy.loginfo(\"Int Pub --> {}\".format(num))\r\n    msg = Int64()\r\n    msg.data = num\r\n    return msg\r\n\r\n\r\n@n.subscriber(\"/test_node_string\", String)\r\ndef str_sub(word):\r\n    rospy.loginfo(\"Sub --> {}\".format(word))\r\n\r\n\r\n@n.subscriber(\"/test_node_int\", Int64)\r\n@n.subscriber(\"/another_test_node_int\", Int64)\r\ndef int_sub(num, topic):\r\n    rospy.loginfo(\"Int Sub ({}) --> {}\".format(topic, num))\r\n\r\n\r\n@n.start_node(frequency=\"frequency\", default_frequency=30)\r\ndef run():\r\n    str_pub(\"balls\")\r\n    int_pub(3).publish(\"/test_node_int\")\r\n    int_pub(10).publish(\"/another_test_node_int\")\r\n```\r\n\r\n*Wait, wait, wait a second. What is going on?*\r\n\r\nWell, I am using\r\n[decorators](https://realpython.com/blog/python/primer-on-python-decorators/)\r\nto hide of all of the dirty work of making publishers, subscribers, and ROS\r\nnodes. So for instance, in the `str_pub` function, the value that is returned\r\nis then published to the \"/test_node_string\" topic. Similarly, in `str_sub`,\r\nwhenever a message is received on the \"/test_node_string\" topic, the `str_sub`\r\nfunction is called with the message as the argument.\r\n\r\n*Wait, wait, wait a second, this obviously doesn't work with classes*\r\n\r\nYes it does.\r\n\r\n```python\r\nimport roshelper\r\nimport rospy\r\nfrom std_msgs.msg import String\r\nfrom std_msgs.msg import Int64\r\n\r\n\r\nn = roshelper.Node(\"test_node\", __name__, anonymous=False)\r\n\r\n\r\n@n.start_node(word=\"balls\")\r\nclass TestNode(object):\r\n\r\n    def __init__(self, word):\r\n        self.word = word\r\n\r\n    @n.publisher(\"/test_node_string\", String)\r\n    def str_pub(self, word):\r\n        rospy.loginfo(\"Pub --> {}\".format(word))\r\n        st = String()\r\n        st.data = word[::-1]\r\n        return st\r\n\r\n    @n.publisher(Int64)\r\n    def int_pub(self, num):\r\n        rospy.loginfo(\"Int Pub --> {}\".format(num))\r\n        msg = Int64()\r\n        msg.data = num\r\n        return msg\r\n\r\n    @n.subscriber(\"/test_node_string\", String)\r\n    def str_sub(self, word):\r\n        rospy.loginfo(\"Sub --> {}\".format(word))\r\n\r\n    @n.subscriber(\"/test_node_int\", Int64)\r\n    @n.subscriber(\"/another_test_node_int\", Int64)\r\n    def int_sub(self, num, topic):\r\n        rospy.loginfo(\"Int Sub ({}) --> {}\".format(topic, num))\r\n\r\n    @n.main_loop(frequency=\"frequency\", default_frequency=30)\r\n    def run(self):\r\n        self.str_pub(self.word)\r\n        self.int_pub(3).publish(\"/test_node_int\")\r\n        self.int_pub(10).publish(\"/another_test_node_int\")\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}